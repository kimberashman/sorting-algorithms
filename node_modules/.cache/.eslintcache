[{"/Users/kimberlyashman/Workspace/web-fun/sorting-visualizer/src/index.js":"1","/Users/kimberlyashman/Workspace/web-fun/sorting-visualizer/src/App.js":"2","/Users/kimberlyashman/Workspace/web-fun/sorting-visualizer/src/reportWebVitals.js":"3","/Users/kimberlyashman/Workspace/sorting-algorithms/src/index.js":"4","/Users/kimberlyashman/Workspace/sorting-algorithms/src/reportWebVitals.js":"5","/Users/kimberlyashman/Workspace/sorting-algorithms/src/App.js":"6","/Users/kimberlyashman/Workspace/sorting-algorithms/src/SortingVisualizer/SortingVisualizer.jsx":"7","/Users/kimberlyashman/Workspace/sorting-algorithms/src/sortingAlgorithms/sortingAlgorithms.js":"8"},{"size":500,"mtime":1618678862250,"results":"9","hashOfConfig":"10"},{"size":264,"mtime":1618684824835,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1618678862251,"results":"12","hashOfConfig":"10"},{"size":500,"mtime":1618678862250,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1618678862251,"results":"15","hashOfConfig":"14"},{"size":264,"mtime":1618684824835,"results":"16","hashOfConfig":"14"},{"size":6598,"mtime":1627346295517,"results":"17","hashOfConfig":"14"},{"size":7372,"mtime":1627346796960,"results":"18","hashOfConfig":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dy5s95",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1wkxx77",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kimberlyashman/Workspace/web-fun/sorting-visualizer/src/index.js",[],"/Users/kimberlyashman/Workspace/web-fun/sorting-visualizer/src/App.js",[],"/Users/kimberlyashman/Workspace/web-fun/sorting-visualizer/src/reportWebVitals.js",[],"/Users/kimberlyashman/Workspace/sorting-algorithms/src/index.js",[],"/Users/kimberlyashman/Workspace/sorting-algorithms/src/reportWebVitals.js",[],"/Users/kimberlyashman/Workspace/sorting-algorithms/src/App.js",[],"/Users/kimberlyashman/Workspace/sorting-algorithms/src/SortingVisualizer/SortingVisualizer.jsx",["36","37","38","39","40","41","42","43"],"import React from 'react';\nimport {getBubbleSortAnimations, getMergeSortAnimations, getQuickSortAnimations, getHeapSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 10;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 50;\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(5, 255));\n        }\n        this.setState({array});\n    }\n\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n            } else {\n                setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                    barOneStyle.backgroundColor = calcColor(0,255,`${newHeight}`);\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    quickSort() {\n        const animations = getQuickSortAnimations(this.state.array);\n        for(let i = 0; i < animations.length; i ++)\n        {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            let [barOne, barTwo, change] = animations[i];\n            if(!change)\n            {\n                const barOneStyle = arrayBars[barOne].style;\n                const barTwoStyle = arrayBars[barTwo].style;\n            } else {\n                setTimeout(() => {\n                    const barOneStyle = arrayBars[barOne].style;\n                    barOneStyle.height = `${barTwo}px`;\n                    barOneStyle.backgroundColor = calcColor(0,255,`${barTwo}`);\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    heapSort() {\n        const animations = getHeapSortAnimations(this.state.array);\n        for(let i = 0; i < animations.length; i ++)\n        {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            let [barOne, barTwo, change] = animations[i];\n            if(!change)\n            {\n                const barOneStyle = arrayBars[barOne].style;\n                const barTwoStyle = arrayBars[barTwo].style;\n            } else {\n                setTimeout(() => {\n                    const barOneStyle = arrayBars[barOne].style;\n                    barOneStyle.height = `${barTwo}px`;\n                    barOneStyle.backgroundColor = calcColor(0,255,`${barTwo}`);\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    bubbleSort() {\n        const animations = getBubbleSortAnimations(this.state.array);\n        for(let i = 0; i < animations.length; i ++)\n        {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            let [barOne, barTwo, change] = animations[i];\n            if(!change)\n            {\n                const barOneStyle = arrayBars[barOne].style;\n                const barTwoStyle = arrayBars[barTwo].style;\n            } else {\n                setTimeout(() => {\n                    const barOneStyle = arrayBars[barOne].style;\n                    barOneStyle.height = `${barTwo}px`;\n                    barOneStyle.backgroundColor = calcColor(0,255,`${barTwo}`);\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    // NOTE: This method will only work if your sorting algorithms actually return\n    // the sorted arrays; if they return the animations (as they currently do), then\n    // this method will be broken.\n    testSortingAlgorithms() {\n        for (let i = 0; i < 100; i++) {\n            const array = [];\n            const length = randomIntFromInterval(1, 1000);\n            for (let i = 0; i < length; i++) {\n                array.push(randomIntFromInterval(-1000, 1000));\n            }\n            const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n            const mergeSortedArray = getMergeSortAnimations(array.slice());\n            console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n        }\n    }\n\n    render() {\n        const {array} = this.state;\n\n        return (\n            <div className=\"array-container\">\n                {array.map((value, idx) => (\n                    <div\n                        className=\"array-bar\"\n                        key={idx}\n                        style={{\n                            // backgroundColor: PRIMARY_COLOR,\n                            backgroundColor: calcColor(0,255,`${value}`),\n                            height: `${value}px`,\n                        }}></div>\n                ))}\n                <button onClick={() => this.resetArray()}>Generate New Array</button>\n                <button onClick={() => this.mergeSort()}>Merge Sort</button>\n                <button onClick={() => this.quickSort()}>Quick Sort</button>\n                <button onClick={() => this.heapSort()}>Heap Sort</button>\n                <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n\n            </div>\n        );\n    }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// From https://stackoverflow.com/questions/36687323/generate-rainbow-colors-based-on-value\nfunction calcColor(min, max, val)\n{\n    var minHue = 240, maxHue=0;\n    var curPercent = (val - min) / (max-min);\n    var colString = \"hsl(\" + ((curPercent * (maxHue-minHue) ) + minHue) + \",100%,50%)\";\n    return colString;\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n            return false;\n        }\n    }\n    return true;\n}","/Users/kimberlyashman/Workspace/sorting-algorithms/src/sortingAlgorithms/sortingAlgorithms.js",[],{"ruleId":"44","severity":1,"message":"45","line":39,"column":23,"nodeType":"46","messageId":"47","endLine":39,"endColumn":34},{"ruleId":"44","severity":1,"message":"48","line":40,"column":23,"nodeType":"46","messageId":"47","endLine":40,"endColumn":34},{"ruleId":"44","severity":1,"message":"45","line":60,"column":23,"nodeType":"46","messageId":"47","endLine":60,"endColumn":34},{"ruleId":"44","severity":1,"message":"48","line":61,"column":23,"nodeType":"46","messageId":"47","endLine":61,"endColumn":34},{"ruleId":"44","severity":1,"message":"45","line":80,"column":23,"nodeType":"46","messageId":"47","endLine":80,"endColumn":34},{"ruleId":"44","severity":1,"message":"48","line":81,"column":23,"nodeType":"46","messageId":"47","endLine":81,"endColumn":34},{"ruleId":"44","severity":1,"message":"45","line":100,"column":23,"nodeType":"46","messageId":"47","endLine":100,"endColumn":34},{"ruleId":"44","severity":1,"message":"48","line":101,"column":23,"nodeType":"46","messageId":"47","endLine":101,"endColumn":34},"no-unused-vars","'barOneStyle' is assigned a value but never used.","Identifier","unusedVar","'barTwoStyle' is assigned a value but never used."]