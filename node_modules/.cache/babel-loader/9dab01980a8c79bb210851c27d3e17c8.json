{"ast":null,"code":"var _jsxFileName = \"/Users/kimberlyashman/Workspace/web-fun/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getBubbleSortAnimations, getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css'; // Change this value for the speed of the animations.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANIMATION_SPEED_MS = 10; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 50; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'pink'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'blue';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 300));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {// We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n    const animations = getBubbleSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      let [barOne, barTwo, change] = animations[i]; // if(!change)\n      // {\n      //     const barOneStyle = arrayBars[barOne].style;\n      //     const barTwoStyle = arrayBars[barTwo].style;\n      //     const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n      //     setTimeout(() => {\n      //         barOneStyle.backgroundColor = color;\n      //         barTwoStyle.backgroundColor = color;\n      //     }, i * ANIMATION_SPEED_MS);\n      // } else {\n      //     setTimeout(() => {\n      //         const barOneStyle = arrayBars[barOne].style;\n      //         barOneStyle.height = `${barTwo}px`;\n      //     }, i * ANIMATION_SPEED_MS);\n      // }\n    }\n  } // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n\n\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: [array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          backgroundColor: PRIMARY_COLOR,\n          height: `${value}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.resetArray(),\n        children: \"Generate New Array\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.mergeSort(),\n        children: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.quickSort(),\n        children: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.heapSort(),\n        children: \"Heap Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.bubbleSort(),\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.testSortingAlgorithms(),\n        children: \"Test Sorting Algorithms (BROKEN)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this);\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/kimberlyashman/Workspace/web-fun/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getBubbleSortAnimations","getMergeSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","heapSort","bubbleSort","barOne","barTwo","change","testSortingAlgorithms","javaScriptSortedArray","slice","sort","a","b","mergeSortedArray","console","log","arraysAreEqual","render","map","value","idx","min","max","Math","floor","random","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getBubbleSortAnimations, getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 10;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 50;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'pink';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'blue';\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(5, 300));\n        }\n        this.setState({array});\n    }\n\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    quickSort() {\n        // We leave it as an exercise to the viewer of this code to implement this method.\n\n    }\n\n    heapSort() {\n        // We leave it as an exercise to the viewer of this code to implement this method.\n    }\n\n    bubbleSort() {\n        // We leave it as an exercise to the viewer of this code to implement this method.\n        const animations = getBubbleSortAnimations(this.state.array);\n        for(let i = 0; i < animations.length; i ++)\n        {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            let [barOne, barTwo, change] = animations[i];\n            // if(!change)\n            // {\n            //     const barOneStyle = arrayBars[barOne].style;\n            //     const barTwoStyle = arrayBars[barTwo].style;\n            //     const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n            //     setTimeout(() => {\n            //         barOneStyle.backgroundColor = color;\n            //         barTwoStyle.backgroundColor = color;\n            //     }, i * ANIMATION_SPEED_MS);\n            // } else {\n            //     setTimeout(() => {\n            //         const barOneStyle = arrayBars[barOne].style;\n            //         barOneStyle.height = `${barTwo}px`;\n            //     }, i * ANIMATION_SPEED_MS);\n            // }\n        }\n    }\n\n    // NOTE: This method will only work if your sorting algorithms actually return\n    // the sorted arrays; if they return the animations (as they currently do), then\n    // this method will be broken.\n    testSortingAlgorithms() {\n        for (let i = 0; i < 100; i++) {\n            const array = [];\n            const length = randomIntFromInterval(1, 1000);\n            for (let i = 0; i < length; i++) {\n                array.push(randomIntFromInterval(-1000, 1000));\n            }\n            const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n            const mergeSortedArray = getMergeSortAnimations(array.slice());\n            console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n        }\n    }\n\n    render() {\n        const {array} = this.state;\n\n        return (\n            <div className=\"array-container\">\n                {array.map((value, idx) => (\n                    <div\n                        className=\"array-bar\"\n                        key={idx}\n                        style={{\n                            backgroundColor: PRIMARY_COLOR,\n                            height: `${value}px`,\n                        }}></div>\n                ))}\n                <button onClick={() => this.resetArray()}>Generate New Array</button>\n                <button onClick={() => this.mergeSort()}>Merge Sort</button>\n                <button onClick={() => this.quickSort()}>Quick Sort</button>\n                <button onClick={() => this.heapSort()}>Heap Sort</button>\n                <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n                <button onClick={() => this.testSortingAlgorithms()}>\n                    Test Sorting Algorithms (BROKEN)\n                </button>\n            </div>\n        );\n    }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n            return false;\n        }\n    }\n    return true;\n}"]},"metadata":{},"sourceType":"module"}