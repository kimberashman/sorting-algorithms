{"ast":null,"code":"export function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n} // https://github.com/Kevin6525/Sorting-Visualizer/blob/master/src/sortingAlgorithms/sortingAlgorithms.js\n\n\nfunction swap(arr, val1, val2) {\n  let temp = arr[val2];\n  arr[val2] = arr[val1];\n  arr[val1] = temp;\n}\n\nexport function getBubbleSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  let size = array.length;\n  doBubbleSort(array, size, animations);\n  return animations;\n}\n\nfunction doBubbleSort(mainArray, size, animations) {\n  for (let i = 0; i < size - 1; i++) {\n    // Last i elements are already in place\n    for (let j = 0; j < size - i - 1; j++) {\n      animations.push([i, j, false]);\n      animations.push([i, j, false]); // Checking if the item at present iteration\n      // is greater than the next iteration\n\n      if (mainArray[j] > mainArray[j + 1]) {\n        // If the condition is true then swap them\n        animations.push([j, mainArray[j + 1], true]);\n        animations.push([j + 1, mainArray[j], true]);\n        swap(mainArray, j, j + 1);\n      }\n    }\n  }\n}\n\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  let size = array.length;\n  doQuickSort(array, 0, array.length - 1, size, animations);\n  return animations;\n}\n\nfunction doQuickSort(mainArray, low, high, size, animations) {\n  if (low >= high) return;\n\n  if (low < high) {\n    // pi is partitioning index, arr[pi] is now at right place\n    let pi = partition(mainArray, low, high, animations);\n    doQuickSort(mainArray, low, pi - 1, animations); // Before pi\n\n    doQuickSort(mainArray, pi + 1, high, animations); // After pi\n  }\n} //This is the function to find the partition the array through pivot points\n\n\nfunction partition(arr, low, high, animations) {\n  let pivot = arr[high];\n  let i = low - 1;\n\n  for (let j = low; j <= high - 1; j++) {\n    animations.push([i, j, false]);\n    animations.push([i, j, false]);\n\n    if (arr[j] < pivot) {\n      i++;\n      swap(arr, arr[i], arr[j]);\n    }\n  }\n\n  swap(arr, arr[i + 1], arr[high]);\n  return i + 1;\n}","map":{"version":3,"sources":["/Users/kimberlyashman/Workspace/web-fun/sorting-visualizer/src/sortingAlgorithms/sortingAlgorithms.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push","swap","arr","val1","val2","temp","getBubbleSortAnimations","size","doBubbleSort","getQuickSortAnimations","doQuickSort","low","high","pi","partition","pivot"],"mappings":"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","sourcesContent":["export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        } else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while (i <= middleIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n}\n// https://github.com/Kevin6525/Sorting-Visualizer/blob/master/src/sortingAlgorithms/sortingAlgorithms.js\nfunction swap(arr, val1, val2)\n{\n    let temp = arr[val2];\n    arr[val2] = arr[val1];\n    arr[val1] = temp;\n}\n\nexport function getBubbleSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    let size = array.length;\n    doBubbleSort(array, size, animations);\n    return animations;\n}\n\nfunction doBubbleSort(mainArray, size, animations) {\n    for (let i = 0; i <size -1; i++) {\n\n        // Last i elements are already in place\n        for (let j = 0; j < (size - i - 1); j++) {\n            animations.push([i, j, false]);\n            animations.push([i, j, false]);\n            // Checking if the item at present iteration\n            // is greater than the next iteration\n            if (mainArray[j] > mainArray[j + 1]) {\n\n                // If the condition is true then swap them\n                animations.push([j,mainArray[j+1],true]);\n                animations.push([j+1,mainArray[j],true]);\n                swap(mainArray,j,j+1);\n            }\n        }\n    }\n}\n\n\n\nexport function getQuickSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    let size = array.length;\n    doQuickSort(array,  0, array.length - 1, size, animations);\n    return animations;\n}\n\nfunction doQuickSort(mainArray, low, high, size, animations) {\n    if(low >= high) return;\n   if (low < high){\n   // pi is partitioning index, arr[pi] is now at right place\n       let pi = partition(mainArray, low, high,animations);\n\n       doQuickSort(mainArray, low, pi - 1, animations);  // Before pi\n       doQuickSort(mainArray, pi + 1, high, animations); // After pi\n   }\n}\n\n//This is the function to find the partition the array through pivot points\nfunction partition(arr, low, high, animations)\n{\n    let pivot = arr[high];\n    let i = low -1;\n\n    for (let j = low; j <=high -1; j++){\n        animations.push([i, j, false]);\n        animations.push([i, j, false]);\n        if (arr[j]<pivot){\n            i++;\n            swap(arr,arr[i],arr[j]);\n        }\n    }\n    swap(arr,arr[i+1],arr[high])\n    return (i+1);\n}"]},"metadata":{},"sourceType":"module"}