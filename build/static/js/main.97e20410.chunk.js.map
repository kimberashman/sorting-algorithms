{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","swap","arr","val1","val2","temp","getBubbleSortAnimations","size","doBubbleSort","getQuickSortAnimations","doQuickSort","lowIndex","highIndex","pivot","pivotIdx","pivotVal","getPivot","getHeapSortAnimations","heapify","doHeapSort","root","left","right","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","style","setTimeout","newHeight","barOneStyle","height","backgroundColor","calcColor","barOne","barTwo","javaScriptSortedArray","sort","a","b","mergeSortedArray","console","log","arraysAreEqual","className","map","value","idx","onClick","mergeSort","quickSort","heapSort","bubbleSort","React","Component","min","max","random","val","arrayOne","arrayTwo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.97e20410.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, j]);\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animations.push([k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        } else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while (i <= middleIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animations.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animations.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n}\n// https://github.com/Kevin6525/Sorting-Visualizer/blob/master/src/sortingAlgorithms/sortingAlgorithms.js\nfunction swap(arr, val1, val2)\n{\n    let temp = arr[val2];\n    arr[val2] = arr[val1];\n    arr[val1] = temp;\n}\n\nexport function getBubbleSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    let size = array.length;\n    doBubbleSort(array, size, animations);\n    return animations;\n}\n\nfunction doBubbleSort(mainArray, size, animations) {\n    for (let i = 0; i <size -1; i++) {\n\n        // Last i elements are already in place\n        for (let j = 0; j < (size - i - 1); j++) {\n            animations.push([i, j, false]);\n            animations.push([i, j, false]);\n            // Checking if the item at present iteration\n            // is greater than the next iteration\n            if (mainArray[j] > mainArray[j + 1]) {\n\n                // If the condition is true then swap them\n                animations.push([j,mainArray[j+1],true]);\n                animations.push([j+1,mainArray[j],true]);\n                swap(mainArray,j,j+1);\n            }\n        }\n    }\n}\n\n\nexport function getQuickSortAnimations(array) {\n    const animations = [];\n    if(array.length <= 1) return array;\n    doQuickSort(array, 0, array.length - 1, animations);\n    return animations;\n}\nfunction doQuickSort(array, lowIndex, highIndex, animations)\n{\n    if(lowIndex >= highIndex) return;\n    let pivot = getPivot(array, lowIndex, highIndex, animations);\n    doQuickSort(array, lowIndex, pivot - 1, animations);\n    doQuickSort(array, pivot + 1, highIndex, animations);\n}\n\n//This is the function to find the partition the array through pivot points\nfunction getPivot(array, lowIndex, highIndex, animations)\n{\n    // Standard quicksort, we set our last element to be our pivot value\n    // Pivot index is where the pivot value belongs in the array once sorted\n    let pivotIdx = lowIndex\n    let pivotVal = array[highIndex];\n    // Iterate through the list, note we use lowIndex as the starting index (For recursive calls)\n    for(let i = lowIndex; i < highIndex; i ++)\n    {\n        //Push the animation twice, Once to highlight it, second to reset color\n        animations.push([pivotIdx, i, false]);\n        animations.push([pivotIdx, i, false]);\n        //If the current value is less than the pivot value, than we increment pivot index\n        if(array[i] < pivotVal)\n        {\n            //Push two animations to swap bar heights (Use true to indicate a change)\n            animations.push([pivotIdx, array[i], true]);\n            animations.push([i, array[pivotIdx], true]);\n            swap(array,i,pivotIdx);\n            pivotIdx ++;\n        }\n    }\n    //Once we reach the end, we highlight the pivot values determined index and the original index\n    //Reset the colors and commit the swap in bar heights\n    animations.push([pivotIdx, highIndex, false]);\n    animations.push([pivotIdx, highIndex, false]);\n    animations.push([pivotIdx, array[highIndex], true]);\n    animations.push([highIndex, array[pivotIdx], true]);\n    swap(array, pivotIdx, highIndex);\n    return pivotIdx;\n}\n\nexport function getHeapSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    let size = array.length;\n    doHeapSort(array, size, animations);\n    return animations;\n}\n\nfunction doHeapSort(array, size, animations)\n{\n    for (let i = (size/2 -1); i >= 0; i--){\n        heapify(array,size,i,animations);\n    }\n\n    for (let i = size-1; i >=0; i--){\n        animations.push([i, array[0], true]);\n        animations.push([0, array[i], true]);\n        swap(array, i, 0);\n        heapify(array, i, 0, animations);\n    }\n\n\n}\n\nfunction heapify(array, size, i, animations) {\n    //n is the size of the heap\n    //rooted at index i\n\n    let root = i;\n    let left = 2*i + 1;\n    let right = 2*i + 2;\n\n    if ((left < size) && (array[root] < array[left])){\n        animations.push([root, left, false]);\n        animations.push([root, left, false]);\n        root = left;\n    }\n\n    if ((right < size) && (array[root] < array[right])){\n        animations.push([root, right, false]);\n        animations.push([root, right, false]);\n        root = right;\n    }\n\n    if (root !== i){\n        animations.push([root, array[i], true]);\n        animations.push([i, array[root], true]);\n        //If root is not i, then swap the values, call heapify recursively\n        swap(array, root, i);\n        heapify(array, size, root, animations);\n    }\n\n}","import React from 'react';\nimport {getBubbleSortAnimations, getMergeSortAnimations, getQuickSortAnimations, getHeapSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 10;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 50;\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n            array.push(randomIntFromInterval(5, 255));\n        }\n        this.setState({array});\n    }\n\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n            } else {\n                setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                    barOneStyle.backgroundColor = calcColor(0,255,`${newHeight}`);\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    quickSort() {\n        const animations = getQuickSortAnimations(this.state.array);\n        for(let i = 0; i < animations.length; i ++)\n        {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            let [barOne, barTwo, change] = animations[i];\n            if(!change)\n            {\n                const barOneStyle = arrayBars[barOne].style;\n                const barTwoStyle = arrayBars[barTwo].style;\n            } else {\n                setTimeout(() => {\n                    const barOneStyle = arrayBars[barOne].style;\n                    barOneStyle.height = `${barTwo}px`;\n                    barOneStyle.backgroundColor = calcColor(0,255,`${barTwo}`);\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    heapSort() {\n        const animations = getHeapSortAnimations(this.state.array);\n        for(let i = 0; i < animations.length; i ++)\n        {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            let [barOne, barTwo, change] = animations[i];\n            if(!change)\n            {\n                const barOneStyle = arrayBars[barOne].style;\n                const barTwoStyle = arrayBars[barTwo].style;\n            } else {\n                setTimeout(() => {\n                    const barOneStyle = arrayBars[barOne].style;\n                    barOneStyle.height = `${barTwo}px`;\n                    barOneStyle.backgroundColor = calcColor(0,255,`${barTwo}`);\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    bubbleSort() {\n        const animations = getBubbleSortAnimations(this.state.array);\n        for(let i = 0; i < animations.length; i ++)\n        {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            let [barOne, barTwo, change] = animations[i];\n            if(!change)\n            {\n                const barOneStyle = arrayBars[barOne].style;\n                const barTwoStyle = arrayBars[barTwo].style;\n            } else {\n                setTimeout(() => {\n                    const barOneStyle = arrayBars[barOne].style;\n                    barOneStyle.height = `${barTwo}px`;\n                    barOneStyle.backgroundColor = calcColor(0,255,`${barTwo}`);\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    // NOTE: This method will only work if your sorting algorithms actually return\n    // the sorted arrays; if they return the animations (as they currently do), then\n    // this method will be broken.\n    testSortingAlgorithms() {\n        for (let i = 0; i < 100; i++) {\n            const array = [];\n            const length = randomIntFromInterval(1, 1000);\n            for (let i = 0; i < length; i++) {\n                array.push(randomIntFromInterval(-1000, 1000));\n            }\n            const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n            const mergeSortedArray = getMergeSortAnimations(array.slice());\n            console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n        }\n    }\n\n    render() {\n        const {array} = this.state;\n\n        return (\n            <div className=\"array-container\">\n                {array.map((value, idx) => (\n                    <div\n                        className=\"array-bar\"\n                        key={idx}\n                        style={{\n                            // backgroundColor: PRIMARY_COLOR,\n                            backgroundColor: calcColor(0,255,`${value}`),\n                            height: `${value}px`,\n                        }}></div>\n                ))}\n                <button onClick={() => this.resetArray()}>Generate New Array</button>\n                <button onClick={() => this.mergeSort()}>Merge Sort</button>\n                <button onClick={() => this.quickSort()}>Quick Sort</button>\n                <button onClick={() => this.heapSort()}>Heap Sort</button>\n                <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n\n            </div>\n        );\n    }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// From https://stackoverflow.com/questions/36687323/generate-rainbow-colors-based-on-value\nfunction calcColor(min, max, val)\n{\n    var minHue = 240, maxHue=0;\n    var curPercent = (val - min) / (max-min);\n    var colString = \"hsl(\" + ((curPercent * (maxHue-minHue) ) + minHue) + \",100%,50%)\";\n    return colString;\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) return false;\n    for (let i = 0; i < arrayOne.length; i++) {\n        if (arrayOne[i] !== arrayTwo[i]) {\n            return false;\n        }\n    }\n    return true;\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <SortingVisualizer></SortingVisualizer>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}